// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  hashedPassword String? // <-- We are adding this field
  accounts      Account[]
  sessions      Session[]
  role          String    @default("user") // For role-based access control
  passwordResetToken         String?   @unique
  passwordResetTokenExpiry   DateTime?
  projects  Project[] // A user can have many projects
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id                 String   @id @default(cuid())
  title              String
  description        String?
  totalBilledHours   Decimal  @default(0) // <-- New field for total project hours
  progress           Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  startDate          DateTime 
  endDate            DateTime? // A project MIGHT have an end date, but it's optional.

  // This creates the relationship to the User model
  consultant   User     @relation(fields: [consultantId], references: [id])
  consultantId String

  // This creates the one-to-many relationship with Phase
  phases      Phase[]
}

model Phase {
  id             String   @id @default(cuid())
  title          String
  allocatedHours Decimal  @default(0) // <-- New field for hours allocated to this phase
  isCompleted    Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // This links the Phase back to a Project
  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  // This creates the one-to-many relationship with Task
  tasks     Task[]
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?  // Optional description field
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  phaseId String
  phase   Phase  @relation(fields: [phaseId], references: [id], onDelete: Cascade)
}